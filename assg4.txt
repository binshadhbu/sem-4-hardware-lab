merge --------------------------


section .data
	msg1: db "Enter Number of Array1: "
	size1: equ $-msg1
	msg2: db "Enter the Elements of Array: "
	size2: equ $-msg2
	msg3: db "Elements after sorting: "
	size3: equ $-msg3
	msg4: db " "
	size4: equ $-msg4
	msg5: db 0Ah
	size5: equ $-msg5
	msg6: db "Enter Number of Array2: "
	size6: equ $-msg6

section .bss
	n: resw 1
	n2: resw 1
	n3: resw 1
	temp1: resb 1
	array: resw 100
	count: resw 1
	count1: resw 1
	count2: resw 1
	temp2: resw 1
	temp3: resw 1
	nod:resb 1

section .text
	global _start:
	_start:
		mov eax,4
		mov ebx,1
		mov ecx,msg1
		mov edx,size1
		int 80h

		mov word[n],0
		mov word[n2],0
		mov word[n3],0

		read_n:
		mov eax,3
		mov ebx,0
		mov ecx,temp1
		mov edx,1
		int 80h

		cmp byte[temp1],10
		je arr_2

		mov ax,word[n]
		mov bx,10
		mul bx
		movzx bx,byte[temp1]
		sub bx,30h
		add ax,bx
		mov word[n],ax
		jmp read_n
		
		arr_2:
		mov eax,4
		mov ebx,1
		mov ecx,msg6
		mov edx,size6
		int 80h
		read_n2:
		mov eax,3
		mov ebx,0
		mov ecx,temp1
		mov edx,1
		int 80h

		cmp byte[temp1],10
		je add_size

		mov ax,word[n3]
		mov bx,10
		mul bx
		movzx bx,byte[temp1]
		sub bx,30h
		add ax,bx
		mov word[n3],ax
		jmp read_n2
		
		add_size:
		mov ax,word[n3]
		add word[n],ax
		
		read_array_elem:

		mov ebx,array
		read_array:
		push ebx
		mov word[n2],0
		mov eax,4
		mov ebx,1
		mov ecx,msg2
		mov edx,size2
		int 80h

		read_ele:
		mov eax,3
		mov ebx,0
		mov ecx,temp1
		mov edx,1
		int 80h

		cmp byte[temp1],10
		je read_continue

		mov ax,word[n2]
		mov bx,10
		mul bx
		movzx bx,byte[temp1]
		sub bx,30h
		add ax,bx
		mov word[n2],ax
		jmp read_ele

		read_continue:
		pop ebx
		mov cx,word[n2]
		mov word[ebx],cx
		add bx,16
		add word[count],1
		mov cx,word[count]
		cmp cx,word[n]
		je bubble_sort

		jmp read_array

		bubble_sort:
		mov eax,4
		mov ebx,1
		mov ecx,msg3
		mov edx,size3
		int 80h
		mov word[count1],0
		mov word[count2],0
		mov ebx,array
		mov edx,array
		mov ax,word[n]
		push ax
		for1:
		pop ax
		cmp word[count1],ax
		je print_array
		push ax
		mov edx,ebx
		mov cx,word[count1]
		mov word[count2],cx
		for2:
		pop ax
		cmp word[count2],ax
		je after_for2
		push ax
		mov ax,word[ebx]
		mov cx,word[edx]
		cmp ax,cx
		jl no_swap
			swap:
			   mov word[ebx],cx
			   mov word[edx],ax
		no_swap:
		inc word[count2]
		add edx,16
		jmp for2
		after_for2:
		push ax
		inc word[count1]
		add ebx,16
		jmp for1

		print_array:
		mov word[count1],0
		mov ebx,array

		printloop:
		mov ax,word[n]
		cmp ax,word[count1]
		je exit
		mov cx,word[ebx]
		mov word[count],cx

		mov byte[nod],0

		number_extract:
		cmp word[count],0
		je print_no
		inc byte[nod]
		mov dx,0
		mov ax,word[count]
		mov bx,10
		div bx
		push dx
		mov word[count],ax
		jmp number_extract

		print_no:
		cmp byte[nod],0
		je after_print_no
		dec byte[nod]
		pop dx
		mov word[temp1],dx
		add word[temp1],30h

		mov eax,4
		mov ebx,1
		mov ecx,temp1
		mov edx,1
		int 80h
		jmp print_no

		after_print_no:

		mov eax,4
		mov ebx,1
		mov ecx,msg4
		mov edx,size4
		int 80h

		inc word[count1]
		mov eax,16
		mul word[count1]
		mov ebx,array
		add ebx,eax
		jmp printloop

		exit:
		mov eax,4
		mov ebx,1
		mov ecx,msg5
		mov edx,size5
		int 80h

		mov eax,1
		mov ebx,0
		int 80h



sort------------------------------------


section .data
msg1: db "Enter Number of Array: "
len1: equ $-msg1
msg2: db "Enter the Elements of Array: "
len2: equ $-msg2
msg3: db "Elements after sorting: "
len3: equ $-msg3
msg4: db " "
len4: equ $-msg4
msg5: db 0Ah
len5: equ $-msg5

section .bss
n: resw 1
n2: resw 1
temp1: resb 1
ar: resw 100
count: resw 1
count1: resw 1
count2: resw 1
temp2: resw 1
temp3: resw 1
nod:resb 1

section .text
global _start:
_start:
mov eax,4
mov ebx,1
mov ecx,msg1
mov edx,len1
int 80h

mov word[n],0
mov word[n2],0

read_n:
mov eax,3
mov ebx,0
mov ecx,temp1
mov edx,1
int 80h

cmp byte[temp1],10
je print_msg2

mov ax,word[n]
mov bx,10
mul bx
movzx bx,byte[temp1]
sub bx,30h
add ax,bx
mov word[n],ax
jmp read_n

print_msg2:

mov ebx,ar
read_array:
push ebx
mov word[n2],0
mov eax,4
mov ebx,1
mov ecx,msg2
mov edx,len2
int 80h

read_ele:
mov eax,3
mov ebx,0
mov ecx,temp1
mov edx,1
int 80h

cmp byte[temp1],10
je continue_read_arr

mov ax,word[n2]
mov bx,10
mul bx
movzx bx,byte[temp1]
sub bx,30h
add ax,bx
mov word[n2],ax
jmp read_ele

continue_read_arr:
pop ebx
mov cx,word[n2]
mov word[ebx],cx
add bx,16
add word[count],1
mov cx,word[count]
cmp cx,word[n]
je sort

jmp read_array

sort:
mov eax,4
mov ebx,1
mov ecx,msg3
mov edx,len3
int 80h
mov word[count1],0
mov word[count2],0
mov ebx,ar
mov edx,ar
mov ax,word[n]
push ax
for1:
pop ax
cmp word[count1],ax
je print_array
push ax
mov edx,ebx
mov cx,word[count1]
mov word[count2],cx
for2:
pop ax
cmp word[count2],ax
je after_for2
push ax
mov ax,word[ebx]
mov cx,word[edx]
cmp ax,cx
jl no_swap
	swap:
	   mov word[ebx],cx
	   mov word[edx],ax
no_swap:
inc word[count2]
add edx,16
jmp for2
after_for2:
push ax
inc word[count1]
add ebx,16
jmp for1

print_array:
mov word[count1],0
mov ebx,ar

printloop:
mov ax,word[n]
cmp ax,word[count1]
je exit
mov cx,word[ebx]
mov word[count],cx

mov byte[nod],0

number_extract:
cmp word[count],0
je print_no
inc byte[nod]
mov dx,0
mov ax,word[count]
mov bx,10
div bx
push dx
mov word[count],ax
jmp number_extract

print_no:
cmp byte[nod],0
je after_print_no
dec byte[nod]
pop dx
mov word[temp1],dx
add word[temp1],30h

mov eax,4
mov ebx,1
mov ecx,temp1
mov edx,1
int 80h
jmp print_no

after_print_no:

mov eax,4
mov ebx,1
mov ecx,msg4
mov edx,len4
int 80h

inc word[count1]
mov eax,16
mul word[count1]
mov ebx,ar
add ebx,eax
jmp printloop

exit:
mov eax,4
mov ebx,1
mov ecx,msg5
mov edx,len5
int 80h

mov eax,1
mov ebx,0
int 80h



transpose-------------------------

section .data
	pm : db "Enter m : "
	lm : equ $-pm
	pn : db "Enter n : "
	ln : equ $-pn
	parr1 : db "Enter Elements Of The Matrix : ",10
	larr : equ $-parr1
	parrs : db "The Transpose Of The Matrix Is : ",10
	larrs : equ $-parrs
	spc : db 32
	nl : db 10

section .bss
	t : resw 1
	a : resw 1
	b : resw 1
	n : resw 1
	m : resw 1
	beg : resw 1
	end : resw 1
	mid : resw 1
	arr : resw 100
	flag : resw 1
	temp : resw 1 
	count : resb 1
	prime : resw 1
	temp_ : resd 1
	
section .text
global _start
_start :
	
	mov eax , 4
	mov ebx , 1
	mov ecx , pm
	mov edx , lm
	int 80h	
	
	call read 
	mov ax , word[temp]
	mov word[m] , ax

	mov eax , 4
	mov ebx , 1
	mov ecx , pn
	mov edx , ln
	int 80h 

	call read
	mov ax , word[temp]
	mov word[n] , ax

	mov eax , 4
	mov ebx , 1
	mov ecx , parr1
	mov edx , larr
	int 80h
	
	mov eax , arr
	call readMatrix

	mov eax , 4
	mov ebx , 1
	mov ecx , parrs
	mov edx , larrs
	int 80h

	mov eax , arr
	call printTrans

	call exit

; Read M x N Matrix
readMatrix :
	pusha
	mov edx , 0
readMLoop :
	cmp dx , word[m]
	je sRMat
	push edx
	push eax
	mov eax , edx
	mov edx , 0
	mov bx , word[n]
	mul bx
	mov edx, 0
	mov bx , 2
	mul bx
	mov edx , eax
	pop eax	
	add eax , edx
	call readArray
	sub eax , edx
	pop edx
	inc edx
	jmp readMLoop 
sRMat :
	popa
	ret	

; Print Transpose Of M x N Matrix
printTrans :
	pusha
	mov edx , 0
pMLoop :
	cmp dx , word[n]
	je sPMat
	push edx
	mov eax , edx
	mov bx , 2
	mul bx
	mov edx , 0
	pop edx
	add eax , arr
	call printArray
	inc edx
	jmp pMLoop 
sPMat :
	popa
	ret

; Read Array Of N Elements
readArray :
	pusha
	mov ebx , 0
readLoop :
	cmp bx , word[n] 
	je sRArr
	call read
	mov cx , word[temp] 
	mov word[eax+2*ebx] , cx
	inc ebx
	jmp readLoop
sRArr :
	popa
	ret

; Array Of N Elements
printArray :
	pusha 
	mov ebx , 0
	mov edx , 0
printLoop :
	cmp bx , word[m]
	je sPArr
	mov cx , word[eax+2*edx]
	mov word[temp] , cx
	call print
	add dx , word[n]
	inc ebx
	jmp printLoop
sPArr :
	call printnl
	popa
	ret

; Multidigit Read Function
read :
	pusha
	mov word[temp] , 0
readDigs :
	mov eax , 3
	mov ebx , 0
	mov ecx , t
	mov edx , 1
	int 80h
	
	cmp word[t] , 10
	je sRead
	cmp word[t] , 32
	je sRead
	sub word[t] , 30h
	mov dx , 0
	mov ax , word[temp]
	mov bx , 10
	mul bx
	add ax , word[t]
	mov word[temp] , ax 
	jmp readDigs
sRead :
	popa
	ret

; Multidigit Print Function
print : 
	pusha
	mov byte[count] , 0
	cmp word[temp] , 0
	je printZero
splitDigs :
	cmp word[temp] , 0 
	je printDigs
	mov edx , 0 
	mov ax , word[temp]
	mov bx , 10
	div bx
	push edx
	mov word[temp] , ax
	inc byte[count] 
	jmp splitDigs	
printDigs :
	cmp byte[count] , 0
	je sPrint
	pop edx 
	mov word[t] , dx
	add word[t] , 30h
	mov eax , 4
	mov ebx , 1
	mov ecx , t
	mov edx , 1
	int 80h
	dec byte[count]
	jmp printDigs
printZero :
	add word[temp] , 30h
	mov eax , 4
	mov ebx , 1
	mov ecx , temp 
	mov edx , 1
	int 80h
sPrint : 
	call printsp
	popa
	ret

printnl :
	pusha
	mov eax , 4
	mov ebx , 1
	mov ecx , nl
	mov edx , 1
	int 80h
	popa
	ret

printsp :
	pusha
	mov eax , 4
	mov ebx , 1
	mov ecx , spc
	mov edx , 1
	int 80h
	popa
	ret

exit : 
	mov eax , 1
	mov ebx , 0
	int 80h


    square of diaogonal----------------------------------------------------------------


    section .bss
num: resw 1 ;For storing a number, to be read of printed....
nod: resb 1 ;For storing the number of digits....
temp: resb 2
matrix1: resw 200
sum :resw 1
m: resw 1
n: resw 1
i: resw 1
j: resw 1
section .data
msg1: db "Enter the number of rows in the matrix : "
msg_size1: equ $-msg1
msg2: db "Enter the elements one by one(row by row) : "
msg_size2: equ $-msg2
msg3: db "Enter the number of columns in the matrix : "
msg_size3: equ $-msg3
msg4: db "the sum of square of diagonal is: "
msg_size4: equ $-msg4
tab: db 9 ;ASCII for vertical tab
new_line: db 10 ;ASCII for new line
section .text
global _start
_start:
mov eax,4
mov ebx,1
mov ecx,msg1
mov edx,msg_size1
int 80h

mov ecx, 0
call read_num
mov cx, word[num]
mov word[m], cx

mov eax,4
mov ebx,1
mov ecx,msg3
mov edx,msg_size3
int 80h

mov ecx, 0
call read_num
mov cx, word[num]
mov word[n], cx
mov eax,4
mov ebx,1
mov ecx,msg2
mov edx,msg_size2
int 80h

mov eax, 0
mov ebx, matrix1

mov word[i], 0
mov word[j], 0
i_loop:
mov word[j], 0
j_loop:
call read_num
mov dx , word[num]

mov word[ebx + 2 * eax], dx
inc eax
;Incrementing array index by one....
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop




mov word[sum],0
mov eax, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop2:
mov word[j], 0
j_loop2:
mov dx, word[ebx + 2 * eax]
mov word[num] , dx
call print_num
pusha
mov ax,word[i]
mov cx,word[j]
cmp ax,cx
je square_sum
popa
square_continue:
pusha
mov eax, 4
mov ebx, 1
mov ecx, tab
mov edx, 1
int 80h
popa
inc eax
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop2
pusha
mov eax,4
mov ebx,1
mov ecx,new_line
mov edx,1
int 80h
popa

inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop2
;Exit System Call.....

pusha
mov eax, 4
mov ebx, 1
mov ecx, msg4
mov edx, msg_size4
int 80h
popa
pusha
mov ax,word[sum]
mov word[num],ax
call print_num
popa
pusha
mov eax,4
mov ebx,1
mov ecx,new_line
mov edx,1
int 80h
popa

exit:
mov eax, 1
mov ebx, 0
int 80h
read_num:
pusha
mov word[num], 0
loop_read:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h

cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx
mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp loop_read
end_read:
popa
ret
;Function to print any number stored in num...
print_num:
pusha
extract_no:
cmp word[num], 0
je print_no
inc byte[nod]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract_no
print_no:
cmp byte[nod], 0
je end_print
dec byte[nod]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax,4
mov ebx,1
mov ecx,temp
mov edx,1
int 80h
jmp print_no
end_print:
popa
ret


square_sum:
pusha
mov ax,dx
mov bx,dx
mul bx
add word[sum],ax
popa
jmp square_continue




printing array-----------------------------------------------------------------------------------

; read_num:
;     ;push all the used registers into the stack using pusha
;     pusha
;     ;store an initial value 0 to variable ’num’
;     mov word[num], 0
; loop_read:
;     ; read a digit
;     mov eax, 3
;     mov ebx, 0
;     mov ecx, temp
;     mov edx, 1
;     int 80h
;     cmp byte[temp], 10
;     je end_read
;     mov ax, word[num]
;      mov bx, 10
;     mul bx
;     mov bl, byte[temp]
;     sub bl, 30h
;     mov bh, 0
;     add ax, bx
;     mov word[num], ax
;     jmp loop_read
; end_read:
;     popa
;     ret


section .data
string_len: db 0
msg1: db "Enter a string : "
smsg1:equ $-msg1
msg2: db "Enter the first index: "
smsg2:equ $-msg2
msg3: db "Enter the second index: "
smsg3:equ $-msg3
section .bss
string: resb 50
temp:resb 1
count:resb 1
n1:resb 1
n2:resb 1

section .data

global _start:
_start:
mov eax,4
mov ebx,1
mov ecx,msg1
mov edx,smsg1
int 80h

mov ebx,string
reading:
push ebx
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h
pop ebx
cmp byte[temp], 10
je end_reading
inc byte[string_len]
mov al,byte[temp]
mov byte[ebx], al
inc ebx
jmp reading
end_reading:
mov ebx,string
mov byte[count],0
print_array:
;pusha
mov eax,4
mov ebx,1
mov ecx,msg2
mov edx,smsg2
int 80h
mov eax, 3
mov ebx, 0
mov ecx, n1
mov edx, 1
int 80h
mov eax,4
mov ebx,1
mov ecx,msg3
mov edx,smsg3
int 80h
mov eax, 3
mov ebx, 0
mov ecx, n2
mov edx, 1
int 80h
sub byte[n1],30h
sub byte[n2],30h
mov ebx, string
printing:

mov al, byte[ebx]
mov byte[temp],al
mov dl,byte[count]
cmp dl,byte[string_len]
je end_printing
cmp dl,byte[n1]
ja cmp_second
jmp cont
cmp_second:
cmp dl,byte[n2]
jb print
jmp end_printing
;checks if the character is NULL character

cont:
inc byte[count]
popa
inc ebx
jmp printing
end_printing:
pusha
mov eax, 1
xor ebx, ebx
int 0x80


print:
pusha
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp cont